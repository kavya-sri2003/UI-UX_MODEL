import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt

# Path to the CSV file and images folder
csv_file_path = 'image_files_info.csv'
images_folder_path = 'UIUX_MODEL'

# Load the CSV file
df = pd.read_csv(csv_file_path)

# Assuming the CSV has a column named 'filename' and 'label'
image_filenames = df['img37.jpg']
labels = df['image_path']  # Replace 'label' with your target variable

# Parameters
image_size = (128, 128)  # Resize images to 128x128
batch_size = 32
epochs = 10

# Load images and preprocess
def load_and_preprocess_image(filename):
    image_path = os.path.join(images_folder_path, filename)
    image = load_img(image_path, target_size=image_size)
    image = img_to_array(image)
    image = image / 255.0  # Normalize to [0, 1]
    return image

# Prepare data
X = np.array([load_and_preprocess_image(filename) for filename in image_filenames])
y = np.array(labels)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a simple CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(image_size[0], image_size[1], 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='linear')  # Use 'sigmoid' for binary classification or 'softmax' for multi-class classification
])

# Compile the model
model.compile(optimizer=Adam(), loss='mse', metrics=['mae'])  # Use 'binary_crossentropy' or 'categorical_crossentropy' for classification

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True
)

# Train the model
history = model.fit(datagen.flow(X_train, y_train, batch_size=batch_size), 
                    validation_data=(X_test, y_test),
                    steps_per_epoch=len(X_train) // batch_size,
                    epochs=epochs)

# Plot training history
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.title('Training and Validation Loss')
plt.show()

# Evaluate the model on the test data
test_loss, test_mae = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss}, Test MAE: {test_mae}")
